from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
import asyncio
import os
import sqlite3
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7682470805:AAHb7x5Z5jLLWy0adF4haEflJptLHmQPi6s"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("user_data.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
cursor.execute("""
CREATE TABLE IF NOT EXISTS messages (
    user_id INTEGER,
    username TEXT,
    message TEXT,
    date TIMESTAMP
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS photos (
    user_id INTEGER,
    username TEXT,
    file_path TEXT,
    date TIMESTAMP
)
""")
conn.commit()

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
BASE_PATH = r"C:\Users\HP OMEN\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ë–ê–ó–ê"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –∏–º—è –µ—Å—Ç—å) –∏–ª–∏ user_id (–µ—Å–ª–∏ –∏–º–µ–Ω–∏ –Ω–µ—Ç)
def create_user_directory(user):
    username = user.username if user.username else str(user.id)
    user_dir = os.path.join(BASE_PATH, username)
    os.makedirs(user_dir, exist_ok=True)
    return user_dir

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", callback_data="open_card")],
            [InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É", callback_data="sell_card")],
            [InlineKeyboardButton(text="–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        ]
    )
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        "‚úÖ –£–∑–Ω–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
        "‚úÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –û–¢–ü –ë–∞–Ω–∫–∞.\n"
        "‚úÖ –ü—Ä–æ–¥–∞—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ. ‚úÖ",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ Inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    if callback.data == "open_card":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_application")],
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
            ]
        )
        await callback.message.reply(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–¢–ü –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π –ø–æ –º–µ—Å—Ç—É –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (5-—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞)...",
            reply_markup=keyboard
        )

    elif callback.data == "sell_card":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="go_back")],
                [InlineKeyboardButton(text="–°–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª", callback_data="info")]
            ]
        )
        await callback.message.reply(
            "–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ø–ª–∞—Å—Ç–∏–∫–æ–≤—É—é –∫–∞—Ä—Ç—É –û–¢–ü –ë–∞–Ω–∫–∞, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ —Å @joniboni_11 –∏ –∏–º–µ—Ç—å –ø—Ä–∏ —Å–µ–±–µ –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–∞—Å–ø–æ—Ä—Ç–∞, SIM-–∫–∞—Ä—Ç—É...",
            reply_markup=keyboard
        )

    elif callback.data == "info":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
            ]
        )
        await callback.message.reply(
            "–û–¢–ü –ë–∞–Ω–∫ –≤—Ö–æ–¥–∏—Ç –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ì—Ä—É–ø–ø—É –û–¢–ü (OTP Group)...",
            reply_markup=keyboard
        )

    elif callback.data == "continue_application":
        application_form = (
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            "–§–ò–û: \n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä–æ–ø–∞: \n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥—Ä–æ–ø–æ–≤–æ–¥–∞: \n"
            "–õ–∏—Ü–µ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞\n"
            "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–æ–ø–∏—Å–∫–∏)\n\n"
            "‚ùó–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ - @joniboni_11\n"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="selled_cards")],
                [InlineKeyboardButton(text="–ö—Ç–æ —Ç–∞–∫–æ–π –¥—Ä–æ–ø –∏ –¥—Ä–æ–ø–æ–≤–æ–¥?", callback_data="drop_info")],
                [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
            ]
        )
        await callback.message.reply(application_form, reply_markup=keyboard)

    elif callback.data == "selled_cards":
        await callback.message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ. \n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
        )

    elif callback.data == "drop_info":
        await callback.message.reply(
            "‚úÖ **–î—Ä–æ–ø** ‚Äî —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã), –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω–µ—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...\n"
        )

    elif callback.data == "go_back":
        await start_command(callback.message)

    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(lambda message: message.content_type == types.ContentType.TEXT)
async def save_message(message: Message):
    user_dir = create_user_directory(message.from_user)
    cursor.execute("""
    INSERT INTO messages (user_id, username, message, date)
    VALUES (?, ?, ?, ?)
    """, (message.from_user.id, message.from_user.username, message.text, datetime.now()))
    conn.commit()
    with open(f"{user_dir}/messages_log.txt", "a", encoding="utf-8") as file:
        file.write(f"[{datetime.now()}] {message.text}\n")
    await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ...")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message(lambda message: message.content_type == types.ContentType.PHOTO)
async def save_photo(message: Message):
    user_dir = create_user_directory(message.from_user)
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    local_file_path = f"{user_dir}/{photo.file_id}.jpg"
    await bot.download_file(file_info.file_path, local_file_path)
    cursor.execute("""
    INSERT INTO photos (user_id, username, file_path, date)
    VALUES (?, ?, ?, ?)
    """, (message.from_user.id, message.from_user.username, local_file_path, datetime.now()))
    conn.commit()
    await message.reply("–í–∞—à–µ —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
